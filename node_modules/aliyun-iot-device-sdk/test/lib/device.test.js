const Buffer = require('buffer').Buffer;
const util = require('util');
const aliyunIot = require('../../');
const Device = require('../../lib/device');
const fixtures = require('../fixtures');

describe('lib/device.test.js', () => {
  test('connect should be ok', done => {
    const device = aliyunIot.device({
      ...fixtures.lightDevice
    });
    device.on('connect', () => {
      device.end();
      done();
    });
  });

  test('productKey should not be empty', done => {
    try {
      const device = aliyunIot.device();
    } catch (e) {
      done();
    }
  });

  test('deviceName should not be empty', done => {
    try {
      const device = aliyunIot.device({
        productKey: '1'
      });
    } catch (e) {
      done();
    }
  });

  test('deviceSecret should not be empty', done => {
    try {
      const device = aliyunIot.device({
        productKey: '1',
        deviceName: '2'
      });
    } catch (e) {
      done();
    }
  });

  test('serve should ok', done => {
    const device = aliyunIot.device({
      ...fixtures.lightDevice
    });
    const serviceName = 'property/set';
    const deServe = device.serve(serviceName, params => {
      expect(params.LightStatus).toBe(1);
      deServe();
      device.end();
      done();
    });
    device.on('connect', () => {
      setTimeout(() => {
        device._onMessage(
          util.format(device.serviceTopic, serviceName.replace('.', '/')),
          new Buffer(
            JSON.stringify({
              method: `${
                Device.METHODS.THING_SERVICE_METHOD_PREFIX
              }property.set`,
              params: {
                LightStatus: 1
              }
            })
          )
        );
      }, 1000);
    });
  });

  test('postProps should ok', done => {
    const device = aliyunIot.device({
      ...fixtures.lightDevice
    });
    device.on('connect', () => {
      device.postProps(
        {
          LightStatus: 0
        },
        (err, res) => {
          expect(err).toBe(null);
          device.end();
          done();
        }
      );
    });
  });

  test('postEvent should ok', done => {
    const device = aliyunIot.device({
      ...fixtures.airBox
    });
    device.on('connect', () => {
      device.postEvent(
        'changeFitler',
        {
          PM25Value: 20
        },
        (err, res) => {
          expect(err).toBe(null);
          device.end();
          done();
        }
      );
    });
  });

  // 数据上报
  // test('publish data should ok', done => {
  //   const device = aliyunIot.device({
  //     ...fixtures.aliyunDevice1
  //   });
  //   device.subscribe(`${device.productKey}/${device.deviceName}/get`);
  //   device.on('message', (topic, payload) => {
  //     console.log(topic, payload.toString());
  //     device.end();
  //     done();
  //   });
  //   device.on('connect', () => {
  //     device.publish(`/${device.productKey}/${device.deviceName}/user/pub`, 'aaa');
  //   });
  // });




  
});

