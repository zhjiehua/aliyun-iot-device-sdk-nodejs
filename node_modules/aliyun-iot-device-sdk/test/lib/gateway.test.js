const util = require('util');
const Buffer = require('buffer').Buffer;
const aliyunIot = require('../../');
const Device = require('../../lib/device');
const fixtures = require('../fixtures');

describe('lib/gateway.test.js', () => {
  test('gateway should be ok', done => {
    const gateway = aliyunIot.gateway(fixtures.gateway);
    gateway.on('connect', () => {
      fixtures.createTestDevicesConfig().forEach(deviceConfig => {
        // 添加子设备到拓扑
        gateway.addTopo(deviceConfig, (err, result) => {
          expect(err).toBeNull();
          // 子设备上线
          gateway.login(deviceConfig, (err, result) => {
            expect(err).toBeNull();
            // 获取拓扑
            gateway.getTopo((err, result) => {
              expect(err).toBeNull();
              // 子设备属性数据上报
              gateway.postSubDeivceProps(
                deviceConfig,
                {
                  CurrentTemperature: Math.ceil(Math.random() * 32)
                },
                (err, result) => {
                  expect(err).toBeNull();
                  const serviceName = 'property/set';
                  gateway.serveSubDeviceService(
                    deviceConfig,
                    serviceName,
                    (params) => {
                      expect(params.LightStatus).toBe(1);
                      // 子设备事件上报
                      gateway.postSubDeviceEvent(
                        deviceConfig,
                        'PM25Warn', // 自定义一个告警事件
                        {
                          PM25Value: 200
                        },
                        (err, result) => {
                          expect(err).toBeNull();
                          // 子设备下线
                          gateway.logout(deviceConfig, (err, result) => {
                            expect(err).toBeNull();
                            // 移除拓扑关系
                            gateway.deleteTopo(deviceConfig, (err, result) => {
                              expect(err).toBeNull();
                              gateway.end();
                              done();
                            });
                          });
                        }
                      );
                    }
                  );
                  gateway._onMessage(
                    util.format(
                      Device.TOPICS.SERVICE_TOPIC,
                      deviceConfig.productKey,
                      deviceConfig.deviceName,
                      serviceName
                    ),
                    new Buffer(
                      JSON.stringify({
                        method: `${
                          Device.METHODS.THING_SERVICE_METHOD_PREFIX
                        }property.set`,
                        params: {
                          LightStatus: 1
                        }
                      })
                    )
                  );
                }
              );
            });
          });
        });
      });
    });
  });
});
