'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var mqtt = require('mqtt');
var EventEmitter = require('events');
var util = require('util');

var _require = require('./utils'),
    hmacSign = _require.hmacSign,
    createGuid = _require.createGuid,
    createDebug = _require.createDebug,
    mqttMatch = _require.mqttMatch,
    getIP = _require.getIP,
    getPlatform = _require.getPlatform;

var debug = createDebug('device');
var guid = createGuid();
var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined' || typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;

var METHODS = {
  POST_PROPERY: 'thing.event.property.post',
  POST_EVENT: 'thing.event.%s.post',
  THING_SERVICE_METHOD_PREFIX: 'thing.service.'
};
var DEFAULT_REGION = 'cn-shanghai';
var BROKER_URL = '%s%s.iot-as-mqtt.%s.aliyuncs.com:%s/';
var TOPICS = {
  SERVICE_TOPIC: '/sys/%s/%s/thing/service/%s',
  PROPERTY_POST_TOPIC: '/sys/%s/%s/thing/event/property/post',
  PROPERTY_POST_REPLY_TOPIC: '/sys/%s/%s/thing/event/property/post_reply',
  EVENT_POST_TOPIC: '/sys/%s/%s/thing/event/%s/post',
  EVENT_POST_REPLY_TOPIC: '/sys/%s/%s/thing/event/%s/post_reply',
  REPORT_SDK_INFO_TOPIC: '/sys/%s/%s/thing/deviceinfo/update'
};
var tlsPrefix = ['tls://', 'mqtts://', 'wss://'];

var Device = function (_EventEmitter) {
  _inherits(Device, _EventEmitter);

  function Device() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Device);

    var _this = _possibleConstructorReturn(this, (Device.__proto__ || Object.getPrototypeOf(Device)).call(this));

    _this.paramsSetting(config); //初始化输入参数
    _this.configchecking(); //验证三元组
    // 初始 connect', 'error', 'close', 'reconnect', 'offline', 'message' 订阅
    _this.onReady = _this.createOnReady();
    _this.subTopicAndOnMessage = _this.createSubTopicAndOnMessage();
    _this.serve = _this.createServe(config);
    // start
    _this.onReady();
    return _this;
  }

  _createClass(Device, [{
    key: 'createOnReady',
    value: function createOnReady() {
      var _this2 = this;

      debug('start mqtt connect');
      var inited = false;
      var callbacks = [];
      var resolve = function resolve() {
        inited = true;
        callbacks.forEach(function (cb) {
          return cb(err);
        });
        callbacks = [];
        //上报sdk版本信息
        var networkInfo = 'WiFi|' + getIP();
        var sdkInfo = {
          "domain": "SYSTEM",
          'SYS_SDK_LANGUAGE': 'NodeJS',
          'SYS_LP_SDK_VERSION': '0.3.0',
          'SYS_SDK_IF_INFO': networkInfo,
          'SYS_SDK_PLATFORM': getPlatform()
        };
        _this2.publish(util.format(TOPICS.REPORT_SDK_INFO_TOPIC, _this2.productKey, _this2.deviceName), JSON.stringify(sdkInfo));
        // console.log('publish sdk info',sdkInfo);
      };
      this._mqttClient = this.createClient(this.config);
      ['connect', 'error', 'close', 'reconnect', 'offline', 'message'].forEach(function (evtName) {
        _this2._mqttClient.on(evtName, function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          debug('mqtt client ' + evtName);
          var _args = [evtName].concat(args);
          _this2.emit.apply(_this2, _toConsumableArray(_args));
        });
        if (!inited && evtName === 'connect') {
          debug('mqtt connected');
          resolve();
        }
      });
      return function (cb) {
        if (inited) {
          if (cb) {
            cb();
          }
        } else {
          if (cb) {
            callbacks.push(cb);
          }
        }
      };
    }
  }, {
    key: 'createSubTopicAndOnMessage',
    value: function createSubTopicAndOnMessage() {
      var _this3 = this;

      var callbacks = [];
      // export for test
      this._onMessage = function (topic, message) {
        callbacks.forEach(function (m) {
          if (mqttMatch(m.subTopic, topic)) {
            m.callback(null, topic, JSON.parse(message.toString()));
          }
        });
      };
      this.onReady(function () {
        _this3._mqttClient.on('message', _this3._onMessage);
      });
      return function (subTopic, cb) {
        var fn = {
          subTopic: subTopic,
          callback: cb
        };
        callbacks.push(fn);
        var unsubTopicAndOnMessage = function unsubTopicAndOnMessage() {
          _this3._mqttClient.unsubscribe(subTopic, function (err, res) {
            if (err) {
              debug('un sub error:', subTopic, err);
            }
            callbacks = callbacks.filter(function (c) {
              return fn !== c;
            });
          });
        };
        var subCallback = function subCallback(err, res) {
          if (err) {
            debug('sub error:', subTopic);
            cb(err);
            unsubTopicAndOnMessage();
          }
        };
        _this3.onReady(function () {
          _this3._mqttClient.subscribe(subTopic, subCallback);
        });
        return unsubTopicAndOnMessage;
      };
    }
  }, {
    key: 'publish',
    value: function publish() {
      var _mqttClient;

      (_mqttClient = this._mqttClient).publish.apply(_mqttClient, arguments);
    }
  }, {
    key: 'subscribe',
    value: function subscribe() {
      var _mqttClient2;

      (_mqttClient2 = this._mqttClient).subscribe.apply(_mqttClient2, arguments);
    }
  }, {
    key: 'unsubscribe',
    value: function unsubscribe() {
      var _mqttClient3;

      (_mqttClient3 = this._mqttClient).unsubscribe.apply(_mqttClient3, arguments);
    }
  }, {
    key: 'end',
    value: function end() {
      var _mqttClient4;

      (_mqttClient4 = this._mqttClient).end.apply(_mqttClient4, arguments);
    }
  }, {
    key: 'createServe',
    value: function createServe(thingId) {
      var _this4 = this;

      var serveCallbacks = {};
      var serviceTopic = util.format(TOPICS.SERVICE_TOPIC, thingId.productKey, thingId.deviceName);
      var serve = function serve(serviceName, cb) {
        serveCallbacks[serviceName] = cb;
        var serviceInvokeTopic = util.format(serviceTopic, serviceName.replace('.', '/'));
        var unsub = _this4.subTopicAndOnMessage(serviceInvokeTopic, function (err, topic, message) {
          if (err) {
            throw err;
            return;
          }
          debug('on service invoke', serviceInvokeTopic, message);
          cb(message.params);
        });
        // 取消服务监听函数 给外部调用
        var deServe = function deServe() {
          debug('unsub service invoke', serviceInvokeTopic);
          unsub();
          serveCallbacks[serviceName] = null;
        };
        return deServe;
      };
      return serve;
    }
  }, {
    key: 'createClient',
    value: function createClient(config) {
      var signAlgorithm = config.signAlgorithm;
      var client = mqtt.connect(this.brokerUrl, this.genConnectPrarms());
      return client;
    }

    /**
     * 连接参数生成规则
     * broker:${YourProductKey}.iot-as-mqtt.${Region}.aliyuncs.com:1883 
     *    Region:https://help.aliyun.com/document_detail/40654.html?spm=a2c4g.11186623.2.14.6cba65fekp352N
     * ClientId: 表示客户端ID，建议使用设备的MAC地址或SN码，64字符内 ，clientId+"|securemode=3,signmethod=hmacsha1,timestamp=132323232|"
     * Username: deviceName+"&"+productKey 
     * Password: sign_hmac(deviceSecret,content)
     * securemode：表示目前安全模式，可选值有2 （TLS直连模式）和3（TCP直连模式）
     * signmethod：签名算法，支持hmacmd5，hmacsha1，hmacsha256和 sha256，默认为hmacmd5。
     * timestamp: 可选
     */

  }, {
    key: 'genConnectPrarms',
    value: function genConnectPrarms() {
      return {
        clientId: this.clientId + '|securemode=' + this.securemode + ',\n      signmethod=hmac' + this.signAlgorithm + ',\n      timestamp=' + this.timestamp + '|',
        username: this.deviceName + '&' + this.productKey,
        password: hmacSign(this.signAlgorithm, this.deviceSecret, 'clientId' + this.clientId + 'deviceName' + this.deviceName + 'productKey' + this.productKey + 'timestamp' + this.timestamp),
        keepalive: this.keepalive,
        clean: this.clean
      };
    }
  }, {
    key: 'postProps',
    value: function postProps() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

      this._decorateRpc({
        method: METHODS.POST_PROPERY,
        pubTopic: this.postPropsTopic,
        replyTopic: this.postPropsReplyTopic,
        params: params
      }, cb);
    }
  }, {
    key: 'postEvent',
    value: function postEvent(eventName) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var cb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

      this._decorateRpc({
        method: util.format(METHODS.POST_EVENT, eventName),
        pubTopic: util.format(this.postEventTopic, eventName),
        replyTopic: util.format(this.postEventReplyTopic, eventName),
        params: params
      }, cb);
    }
    /*
     * 包装后的 rpc 模型
     */

  }, {
    key: '_decorateRpc',
    value: function _decorateRpc(_ref, cb) {
      var method = _ref.method,
          params = _ref.params,
          pubTopic = _ref.pubTopic,
          replyTopic = _ref.replyTopic,
          timeout = _ref.timeout;

      var id = guid();
      var msg = {
        id: id,
        version: '1.0',
        params: params,
        method: method
      };
      var payload = JSON.stringify(msg);
      debug('pub', pubTopic, payload);
      var unsubReply = this.subTopicAndOnMessage(replyTopic, function (err, topic, message) {
        if (message && message.id === id) {
          clearTimeout(timer);
          if (err) {
            return errHandler(err);
          }
          if (message.code === 200) {
            cb(null, message);
          } else {
            cb(message, null);
          }
          unsubReply();
        }
      });
      var timer = setTimeout(function () {
        errHandler(new Error('sub reply timeout: ' + replyTopic));
      }, timeout || 10000);
      var errHandler = function errHandler(err) {
        unsubReply();
        cb(err, null);
      };
      this._mqttClient.publish(pubTopic, payload, function (err, res) {
        debug('pub callback', pubTopic, msg.id, err, res);
        if (err) {
          clearTimeout(timer);
          errHandler(err);
        }
      });
    }
  }, {
    key: 'paramsSetting',
    value: function paramsSetting(config) {
      var _this5 = this;

      // brokerUrlsecuremode&brokerPort
      if (config.brokerUrl && tlsPrefix.some(function (prefix) {
        return config.brokerUrl.startsWith(prefix);
      }) || config.tls) {
        this.securemode = 2;
        this.tls = true;
      } else {
        this.securemode = 3;
      }
      if (isBrowser) {
        if (this.tls) {
          this.brokerProtocol = 'wss://';
        } else {
          this.brokerProtocol = 'ws://';
        }
        this.brokerPort = 443;
      } else {
        if (this.tls) {
          this.brokerProtocol = 'mqtts://';
        } else {
          this.brokerProtocol = 'mqtt://';
        }
        this.brokerPort = 1883;
      }
      if (config.brokerUrl && tlsPrefix.some(function (prefix) {
        return config.brokerUrl.startsWith(prefix);
      }) || config.tls) {
        this.securemode = 2;
        this.tls = true;
      } else {
        this.securemode = 3;
      }
      if (isBrowser) {
        if (this.tls) {
          this.brokerProtocol = 'wss://';
        } else {
          this.brokerProtocol = 'ws://';
        }
        this.brokerPort = 443;
      } else {
        if (this.tls) {
          this.brokerProtocol = 'mqtts://';
        } else {
          this.brokerProtocol = 'mqtt://';
        }
        this.brokerPort = 1883;
      }
      //三元组忽略大小写
      Object.keys(config).forEach(function (originKey) {
        var key = originKey.toLowerCase();
        switch (key) {
          case "productkey":
            _this5.productKey = config[originKey];break;
          case "devicename":
            _this5.deviceName = config[originKey];break;
          case "devicesecret":
            _this5.deviceSecret = config[originKey];break;
        }
      });
      this.region = config.region || config.regionId;
      this.keepalive = config.keepalive || 60; //keepalive，默认60
      this.clean = config.clean || false; //cleanSession配置选项
      this.signAlgorithm = config.signAlgorithm || 'sha1';
      this.config = config || {};
      if (config.brokerUrl) {
        this.brokerUrl = config.brokerUrl;
      } else {
        this.brokerUrl = util.format(BROKER_URL, this.brokerProtocol, this.productKey, this.region || DEFAULT_REGION, this.brokerPort);
      }
      this.timestamp = Date.now();
      this.clientId = config.clientId ? config.clientId + '_aliyun-iot-device-sdk-js' : this.productKey + '&' + this.deviceName + '_aliyun-iot-device-sdk-js';

      //topic
      this.postPropsTopic = util.format(TOPICS.PROPERTY_POST_TOPIC, this.productKey, this.deviceName);
      this.postPropsReplyTopic = util.format(TOPICS.PROPERTY_POST_REPLY_TOPIC, this.productKey, this.deviceName);
      this.postEventTopic = util.format(TOPICS.EVENT_POST_TOPIC, this.productKey, this.deviceName);
      this.postEventReplyTopic = util.format(TOPICS.EVENT_POST_REPLY_TOPIC, this.productKey, this.deviceName);
      this.serviceTopic = util.format(TOPICS.SERVICE_TOPIC, this.productKey, this.deviceName);
    }
  }, {
    key: 'configchecking',
    value: function configchecking() {
      if (typeof this.productKey === 'undefined') {
        throw new Error('productKey should not be empty');
      }
      if (typeof this.deviceName === 'undefined') {
        throw new Error('deviceName should not be empty');
      }
      if (typeof this.deviceSecret === 'undefined') {
        throw new Error('deviceSecret should not be empty');
      }
    }
  }]);

  return Device;
}(EventEmitter);

Device.METHODS = METHODS;
Device.TOPICS = TOPICS;
module.exports = Device;