'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var crypto = require('crypto');
var os = require('os');

function hmacSign(type, secret, content) {
  return crypto.createHmac(type, secret).update(content).digest('hex');
}

function mqttMatch(filter, topic) {
  var filterArray = filter.split('/');
  var length = filterArray.length;
  var topicArray = topic.split('/');

  for (var i = 0; i < length; ++i) {
    var left = filterArray[i];
    var right = topicArray[i];
    if (left === '#') return true;
    if (left !== '+' && left !== right) return false;
  }

  return length === topicArray.length;
}

function createGuid() {
  var id = 1;
  return function () {
    return String(id++);
  };
}

function signUtil(deviceConfig) {
  var signMethod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'sha1';

  var timestamp = Date.now();
  var device = {
    productKey: deviceConfig.productKey,
    deviceName: deviceConfig.deviceName,
    clientId: deviceConfig.productKey + '&' + deviceConfig.deviceName,
    timestamp: timestamp
  };
  device.signMethod = 'hmac' + signMethod;
  var signcontent = 'clientId' + device.clientId + 'deviceName' + device.deviceName + 'productKey' + device.productKey + 'timestamp' + timestamp;
  device.sign = hmacSign(signMethod, deviceConfig.deviceSecret, signcontent);
  return device;
}

function createDebug(mod) {
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var debugMod = process.env.DEBUG;
    if (debugMod) {
      if (debugMod === '*' || mod.indexOf(debugMod) > -1) {
        var _console;

        var _args = [mod + ':'].concat(args);
        (_console = console).log.apply(_console, _toConsumableArray(_args));
      }
    }
  };
}

function getIP() {
  var ifaces = os.networkInterfaces();
  var ip = "";
  for (var dev in ifaces) {
    ifaces[dev].forEach(function (details) {
      if (details.family == 'IPv4' && dev === 'en0') {
        ip = details.address;
      }
    });
  }
  return ip;
}

function getPlatform() {
  return os.platform();
}

exports.getPlatform = getPlatform;
exports.getIP = getIP;
exports.hmacSign = hmacSign;
exports.mqttMatch = mqttMatch;
exports.createGuid = createGuid;
exports.signUtil = signUtil;
exports.createDebug = createDebug;