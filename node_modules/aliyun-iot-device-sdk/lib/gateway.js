'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var util = require('util');
var Device = require('./device');

var METHODS = {
  ADD_TOPO: 'thing.topo.add',
  DELETE_TOPO: 'thing.topo.delete',
  GET_TOPO: 'thing.topo.get'
};
var TOPICS = {
  ADD_TOPO_TOPIC: '/sys/%s/%s/thing/topo/add',
  ADD_TOPO_REPLY_TOPIC: '/sys/%s/%s/thing/topo/add_reply',
  DELETE_TOPO_TOPIC: '/sys/%s/%s/thing/topo/delete',
  DELETE_TOPO_REPLY_TOPIC: '/sys/%s/%s/thing/topo/delete_reply',
  GET_TOPO_TOPIC: '/sys/%s/%s/thing/topo/get',
  GET_TOPO_REPLY_TOPIC: '/sys/%s/%s/thing/topo/get_reply',
  LOGIN_TOPIC: '/ext/session/%s/%s/combine/login',
  LOGIN_REPLY_TOPIC: '/ext/session/%s/%s/combine/login_reply',
  LOGOUT_TOPIC: '/ext/session/%s/%s/combine/logout',
  LOGOUT_REPLY_TOPIC: '/ext/session/%s/%s/combine/logout_reply'
};

var Gateway = function (_Device) {
  _inherits(Gateway, _Device);

  function Gateway() {
    var _ref;

    _classCallCheck(this, Gateway);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = Gateway.__proto__ || Object.getPrototypeOf(Gateway)).call.apply(_ref, [this].concat(args)));

    _this.addTopoTopic = util.format(TOPICS.ADD_TOPO_TOPIC, _this.productKey, _this.deviceName);
    _this.addTopoReplyTopic = util.format(TOPICS.ADD_TOPO_REPLY_TOPIC, _this.productKey, _this.deviceName);
    _this.loginTopic = util.format(TOPICS.LOGIN_TOPIC, _this.productKey, _this.deviceName);
    _this.loginReplyTopic = util.format(TOPICS.LOGIN_REPLY_TOPIC, _this.productKey, _this.deviceName);
    _this.logoutTopic = util.format(TOPICS.LOGOUT_TOPIC, _this.productKey, _this.deviceName);
    _this.logoutReplyTopic = util.format(TOPICS.LOGOUT_REPLY_TOPIC, _this.productKey, _this.deviceName);
    _this.getTopoTopic = util.format(TOPICS.GET_TOPO_TOPIC, _this.productKey, _this.deviceName);
    _this.getTopoReplyTopic = util.format(TOPICS.GET_TOPO_REPLY_TOPIC, _this.productKey, _this.deviceName);
    _this.deleteTopoTopic = util.format(TOPICS.DELETE_TOPO_TOPIC, _this.productKey, _this.deviceName);
    _this.topoDeleteReplyTopic = util.format(TOPICS.DELETE_TOPO_REPLY_TOPIC, _this.productKey, _this.deviceName);
    return _this;
  }

  _createClass(Gateway, [{
    key: 'addTopo',
    value: function addTopo(deviceSign, cb) {
      this._decorateRpc({
        method: METHODS.ADD_TOPO,
        params: [deviceSign],
        pubTopic: this.addTopoTopic,
        replyTopic: this.addTopoReplyTopic
      }, cb);
    }
  }, {
    key: 'getTopo',
    value: function getTopo(cb) {
      this._decorateRpc({
        method: METHODS.GET_TOPO,
        params: {},
        pubTopic: this.getTopoTopic,
        replyTopic: this.getTopoReplyTopic
      }, cb);
    }
  }, {
    key: 'deleteTopo',
    value: function deleteTopo(thingId, cb) {
      this._decorateRpc({
        method: METHODS.DELETE_TOPO,
        params: [thingId],
        pubTopic: this.deleteTopoTopic,
        replyTopic: this.topoDeleteReplyTopic
      }, cb);
    }
  }, {
    key: 'login',
    value: function login(deviceSign, cb) {
      this._decorateRpc({
        params: deviceSign,
        pubTopic: this.loginTopic,
        replyTopic: this.loginReplyTopic
      }, cb);
    }
  }, {
    key: 'logout',
    value: function logout(thingId, cb) {
      this._decorateRpc({
        params: thingId,
        pubTopic: this.logoutTopic,
        replyTopic: this.logoutReplyTopic
      }, cb);
    }
  }, {
    key: 'postSubDeivceProps',
    value: function postSubDeivceProps(thingId) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var cb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

      var pubTopic = util.format(Device.TOPICS.PROPERTY_POST_TOPIC, thingId.productKey, thingId.deviceName);
      var subTopic = util.format(Device.TOPICS.PROPERTY_POST_REPLY_TOPIC, thingId.productKey, thingId.deviceName);
      this._decorateRpc({
        method: Device.METHODS.POST_PROPERY,
        pubTopic: pubTopic,
        replyTopic: subTopic,
        params: params
      }, cb);
    }
  }, {
    key: 'postSubDeviceEvent',
    value: function postSubDeviceEvent(thingId, eventName) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var cb = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};

      var pubTopic = util.format(Device.TOPICS.EVENT_POST_TOPIC, thingId.productKey, thingId.deviceName, eventName);
      var subTopic = util.format(Device.TOPICS.EVENT_POST_REPLY_TOPIC, thingId.productKey, thingId.deviceName, eventName);
      var method = util.format(Device.METHODS.POST_EVENT, eventName);
      this._decorateRpc({
        method: method,
        pubTopic: pubTopic,
        replyTopic: subTopic,
        params: params
      }, cb);
    }
  }, {
    key: 'serveSubDeviceService',
    value: function serveSubDeviceService(thingId, serviceIdentifier) {
      var cb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

      var subDeviceSerivceTopic = util.format(Device.TOPICS.SERVICE_TOPIC, thingId.productKey, thingId.deviceName, serviceIdentifier);
      var deServe = this.subTopicAndOnMessage(subDeviceSerivceTopic, function (err, topic, message) {
        cb(message.params);
      });
      return deServe;
    }
  }]);

  return Gateway;
}(Device);

module.exports = Gateway;